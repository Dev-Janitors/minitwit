---
name: Continuous Deployment

on:
    push:
        # Run workflow every time something is pushed to the main branch
        branches:
            - main
            - master
    # allow manual triggers for now too
    workflow_dispatch:
        manual: true

# Remember to set the following secrets in your repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Login to Docker Hub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Build and push frontend
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: ./Frontend/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/minitwitfrontend:latest
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitfrontend:webbuildcache
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitfrontend:webbuildcache,mode=max
                  secrets: |
                      "REACT_APP_API_URL=${{secrets.REACT_APP_API_URL}}"

                      "REACT_APP_AUTH0_DOMAIN=${{secrets.REACT_APP_AUTH0_DOMAIN}}"
                      "REACT_APP_AUTH0_CLIENT_ID=${{secrets.REACT_APP_AUTH0_CLIENT_ID}}"
                      "REACT_APP_AUTH0_CALLBACK_URL=${{secrets.REACT_APP_AUTH0_CALLBACK_URL}}"
                      "REACT_APP_API_SERVER_URL=${{secrets.REACT_APP_API_SERVER_URL}}"
                      "REACT_APP_AUTH0_AUDIENCE=${{secrets.REACT_APP_AUTH0_AUDIENCE}}"

            - name: Build and push minitwitdb
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: ./Database/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/minitwitdb:latest
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitdb:minitwitdbbuildcache
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitdb:minitwitdbbuildcache,mode=max

            - name: Build and push minitwitbackend
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: ./Backend/Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/minitwitbackend:latest
                  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitbackend:backendbuildcachce
                  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitbackend:backendbuildcachce,mode=max

            #- name: Test minitwit
            # run: |
            #  docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-minitwit-tests .
            # yes 2>/dev/null | docker-compose up -d
            #docker run --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage
            #env:
            # DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

            - name: Configure SSH
              run: |
                  mkdir -p ~/.ssh/
                  echo "$SSH_KEY" > ~/.ssh/minitwit.key
                  chmod 600 ~/.ssh/minitwit.key
              env:
                  SSH_KEY: ${{ secrets.SSH_KEY }}
            
            - name: Deploy to server
              # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
              run: >
                  ssh $SSH_USER@$SSH_HOST
                  -i ~/.ssh/minitwit.key -o StrictHostKeyChecking=no
                  '/minitwit/deploy.sh'
              env:
                  SSH_USER: ${{ secrets.SSH_USER }}
                  SSH_HOST: ${{ secrets.SSH_HOST }}
            - name: Create release
              uses: actions/create-release@v1.0.0
              env:
                GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
              with:
                tag_name: v1.0.${{ github.run_number }}
                release_name: v1.0.${{ github.run_number }}
                body: |
                  Release Notes for v1.0.${{ github.run_number }}:
                  - Commit 1
                  - Commit 2

            

